@page "/chat"
@using Ganss.Xss


@inject NavigationManager NavigationManager

@attribute [Authorize]
@rendermode InteractiveWebAssembly

<h3>Chat</h3>
<AuthorizeView>
	Hello @context.User.Identity?.Name!
</AuthorizeView>

@if (IsConnected)
{

	<div class="input-group mb-3">
		<input type="text" class="form-control" @bind="messageInput" placeholder="Type a message" />
		<button class="btn btn-primary" @onclick="Send">Send</button>
	</div>

	<div class="list-group" id="messageList">
		@foreach (var message in messages)
		{
			<div class="">
			@message
			</div>
		}
	</div>

}
else
{
	<span>Connecting...</span>
}




@code {
	private HubConnection hubConnection;

	private List<string> messages = new List<string>();
	private string username;
	private string messageInput;
	// Jag har installerat paketeT HtmlSanitizer för att sanitera medelandena för att undvika Xss attacker
	private readonly HtmlSanitizer sanitizer = new HtmlSanitizer();

	// connect to hub
	protected override async Task OnInitializedAsync()
	{
		// Hämta den inloggade användarens autentiseringstillstånd
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		username = user.Identity.Name;
		

		hubConnection = new HubConnectionBuilder()
		.WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
		.Build();

		hubConnection.On<string, string>("RecieveMessage", (username, message) =>
		{
			//Här saniteras meddelandena när de tas emot
			var sanitizedMessage = sanitizer.Sanitize(message);
			var encodedMsg = $"{username}: {sanitizedMessage}";
			messages.Add(encodedMsg);
			InvokeAsync(StateHasChanged);

		});

		await hubConnection.StartAsync();
	}

	Task Send()
	{
		//Här saniteras meddelandena innan de skickas iväg.
		var sanitizedMessage = sanitizer.Sanitize(messageInput);
		return hubConnection.SendAsync("SendMessage", username, sanitizedMessage);
	}

	public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
}
